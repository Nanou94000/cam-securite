{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nourou\\\\Documents\\\\Developpement WEB\\\\CamSecurite-django-react\\\\frontend\\\\src\\\\pages\\\\components\\\\CheckoutForm.js\";\nimport { ElementsConsumer, PaymentElement } from '@stripe/react-stripe-js';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CheckoutForm extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      const {\n        stripe,\n        elements\n      } = this.props;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmPayment({\n        //`Elements` instance that was used to create the Payment Element\n        elements,\n        confirmParams: {\n          return_url: \"https://example.com/order/123/complete\"\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (for example, payment details incomplete)\n        console.log(result.error.message);\n      } else {// Your customer will be redirected to your `return_url`. For some payment\n        // methods like iDEAL, your customer will be redirected to an intermediate\n        // site first to authorize the payment, then redirected to the `return_url`.\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !this.props.stripe,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default function InjectedCheckoutForm() {\n  return /*#__PURE__*/_jsxDEV(ElementsConsumer, {\n    children: _ref => {\n      let {\n        stripe,\n        elements\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(CheckoutForm, {\n        stripe: stripe,\n        elements: elements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_c = InjectedCheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InjectedCheckoutForm\");","map":{"version":3,"sources":["C:/Users/Nourou/Documents/Developpement WEB/CamSecurite-django-react/frontend/src/pages/components/CheckoutForm.js"],"names":["ElementsConsumer","PaymentElement","React","useState","useEffect","CheckoutForm","Component","handleSubmit","event","preventDefault","stripe","elements","props","result","confirmPayment","confirmParams","return_url","error","console","log","message","render","InjectedCheckoutForm"],"mappings":";AAAA,SAAQA,gBAAR,EAA0BC,cAA1B,QAA+C,yBAA/C;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAGA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,YADyC,GAC1B,MAAOC,KAAP,IAAiB;AAC9B;AACA;AACAA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA;AAAT,UAAqB,KAAKC,KAAhC;;AAEA,UAAI,CAACF,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,YAAME,MAAM,GAAG,MAAMH,MAAM,CAACI,cAAP,CAAsB;AACzC;AACAH,QAAAA,QAFyC;AAGzCI,QAAAA,aAAa,EAAE;AACbC,UAAAA,UAAU,EAAE;AADC;AAH0B,OAAtB,CAArB;;AAQA,UAAIH,MAAM,CAACI,KAAX,EAAkB;AAChB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACI,KAAP,CAAaG,OAAzB;AACD,OAHD,MAGO,CACL;AACA;AACA;AACD;AACF,KA9BwC;AAAA;;AAgCzCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAM,MAAA,QAAQ,EAAE,KAAKd,YAArB;AAAA,8BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,QAAQ,EAAE,CAAC,KAAKK,KAAL,CAAWF,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAvCwC;;AA0C3C,eAAe,SAASY,oBAAT,GAAgC;AAC7C,sBACE,QAAC,gBAAD;AAAA,cACG;AAAA,UAAC;AAACZ,QAAAA,MAAD;AAASC,QAAAA;AAAT,OAAD;AAAA,0BACC,QAAC,YAAD;AAAc,QAAA,MAAM,EAAED,MAAtB;AAA8B,QAAA,QAAQ,EAAEC;AAAxC;AAAA;AAAA;AAAA;AAAA,cADD;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;KARuBW,oB","sourcesContent":["import {ElementsConsumer, PaymentElement} from '@stripe/react-stripe-js';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\nclass CheckoutForm extends React.Component {\r\n  handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    const {stripe, elements} = this.props;\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmPayment({\r\n      //`Elements` instance that was used to create the Payment Element\r\n      elements,\r\n      confirmParams: {\r\n        return_url: \"https://example.com/order/123/complete\",\r\n      },\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (for example, payment details incomplete)\r\n      console.log(result.error.message);\r\n    } else {\r\n      // Your customer will be redirected to your `return_url`. For some payment\r\n      // methods like iDEAL, your customer will be redirected to an intermediate\r\n      // site first to authorize the payment, then redirected to the `return_url`.\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <PaymentElement />\r\n        <button disabled={!this.props.stripe}>Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function InjectedCheckoutForm() {\r\n  return (\r\n    <ElementsConsumer>\r\n      {({stripe, elements}) => (\r\n        <CheckoutForm stripe={stripe} elements={elements} />\r\n      )}\r\n    </ElementsConsumer>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}