{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nourou\\\\Documents\\\\Developpement WEB\\\\CamSecurite-django-react\\\\frontend\\\\src\\\\pages\\\\components\\\\Stripe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ApiService from \"../components/api\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Stripe() {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const card = elements.getElement(PaymentElement); // add these lines\n\n    const {\n      paymentMethod,\n      error\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: card\n    });\n    ApiService.saveStripeInfo({\n      email,\n      payment_method_id: paymentMethod.id\n    }).then(response => {\n      console.log(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"f\",\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-input\",\n        id: \"email\",\n        name: \"name\",\n        type: \"email\",\n        placeholder: \"jenny.rosen@example.com\",\n        required: true,\n        value: email,\n        onChange: event => {\n          setEmail(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btt\",\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stripe, \"MsFpLZH1+1BCSQa6yN7agx8sftY=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Stripe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stripe\");","map":{"version":3,"sources":["C:/Users/Nourou/Documents/Developpement WEB/CamSecurite-django-react/frontend/src/pages/components/Stripe.js"],"names":["React","useEffect","useState","ApiService","PaymentElement","useStripe","useElements","Stripe","email","setEmail","stripe","elements","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","event","preventDefault","card","getElement","paymentMethod","error","createPaymentMethod","type","saveStripeInfo","payment_method_id","id","response","console","log","data","catch","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ApiService from \"../components/api\";\r\nimport {\r\n  PaymentElement,\r\n  useStripe,\r\n  useElements\r\n} from \"@stripe/react-stripe-js\";\r\n\r\nexport default function Stripe() {\r\n    const [email, setEmail] = useState('');\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      return;\r\n    }\r\n\r\n    const clientSecret = new URLSearchParams(window.location.search).get(\r\n      \"payment_intent_client_secret\"\r\n    );\r\n\r\n    if (!clientSecret) {\r\n      return;\r\n    }\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"Payment succeeded!\");\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"Your payment is processing.\");\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"Your payment was not successful, please try again.\");\r\n          break;\r\n        default:\r\n          setMessage(\"Something went wrong.\");\r\n          break;\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const card = elements.getElement(PaymentElement);\r\n   \r\n   // add these lines\r\n    const {paymentMethod, error} = await stripe.createPaymentMethod({\r\n       type: 'card',\r\n       card: card\r\n    });\r\n    ApiService.saveStripeInfo({\r\n        email, \r\n        payment_method_id: paymentMethod.id\r\n    })\r\n    .then(response => {\r\n        console.log(response.data);\r\n    }).catch(error => {\r\n        console.log(error)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <form className=\"f\" id=\"payment-form\" onSubmit={handleSubmit}>\r\n    <div className=\"form-row\">\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input className=\"form-input\" id=\"email\" name=\"name\"    type=\"email\" placeholder=\"jenny.rosen@example.com\" required \r\nvalue={email} onChange={(event) => { setEmail(event.target.value)}} />\r\n    </div>\r\n      <PaymentElement id=\"payment-element\" />\r\n      <button className=\"btt\"  id=\"submit\">\r\n        <span id=\"button-text\">\r\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\r\n        </span>\r\n      </button>\r\n      {/* Show any error or success messages */}\r\n      {message && <div id=\"payment-message\">{message}</div>}\r\n    </form>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}