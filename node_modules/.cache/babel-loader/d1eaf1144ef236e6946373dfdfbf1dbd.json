{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nourou\\\\Documents\\\\Developpement WEB\\\\bmc-django-react\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\nlet camera, scene, renderer;\ninit();\nrender();\n\nfunction init() {\n  const container = document.createElement('div');\n  document.getElementById(\"threejs\").appendChild(container);\n  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.25, 20);\n  camera.position.set(-1.8, 0.6, 2.7);\n  scene = new THREE.Scene();\n  new RGBELoader().load('environment.hdr', function (texture) {\n    texture.mapping = THREE.EquirectangularReflectionMapping;\n    scene.background = texture;\n    scene.environment = texture;\n    render(); // model\n\n    const loader = new GLTFLoader();\n    loader.load('suzanne.gltf', function (gltf) {\n      scene.add(gltf.scene);\n      render();\n    });\n  });\n  renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth / 2, window.innerHeight);\n  renderer.toneMapping = THREE.ACESFilmicToneMapping;\n  renderer.toneMappingExposure = 1;\n  renderer.outputEncoding = THREE.sRGBEncoding;\n  container.appendChild(renderer.domElement);\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.addEventListener('change', render); // use if there is no animation loop\n\n  controls.minDistance = 2;\n  controls.maxDistance = 10;\n  controls.target.set(0, 0, -0.2);\n  controls.update();\n  window.addEventListener('resize', onWindowResize);\n}\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  render();\n} //\n\n\nfunction render() {\n  renderer.render(scene, camera);\n}","map":{"version":3,"sources":["C:/Users/Nourou/Documents/Developpement WEB/bmc-django-react/frontend/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","BrowserRouter","render","document","getElementById","camera","scene","renderer","init","container","createElement","appendChild","THREE","PerspectiveCamera","window","innerWidth","innerHeight","position","set","Scene","RGBELoader","load","texture","mapping","EquirectangularReflectionMapping","background","environment","loader","GLTFLoader","gltf","add","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","domElement","controls","OrbitControls","addEventListener","minDistance","maxDistance","target","update","onWindowResize","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap/dist/js/bootstrap.js'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\nlet camera, scene, renderer;\n\ninit();\nrender();\n\nfunction init() {\n\n  const container = document.createElement( 'div' );\n  document.getElementById(\"threejs\").appendChild( container );\n\n  camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 20 );\n  camera.position.set( - 1.8, 0.6, 2.7 );\n\n  scene = new THREE.Scene();\n\n  new RGBELoader()\n    .load( 'environment.hdr', function ( texture ) {\n\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n\n      scene.background = texture;\n      scene.environment = texture;\n\n      render();\n\n      // model\n\n      const loader = new GLTFLoader();\n      loader.load( 'suzanne.gltf', function ( gltf ) {\n\n        scene.add( gltf.scene );\n\n        render();\n\n      } );\n\n    } );\n\n  renderer = new THREE.WebGLRenderer( { antialias: true } );\n  renderer.setPixelRatio( window.devicePixelRatio );\n  renderer.setSize( window.innerWidth/2, window.innerHeight );\n  renderer.toneMapping = THREE.ACESFilmicToneMapping;\n  renderer.toneMappingExposure = 1;\n  renderer.outputEncoding = THREE.sRGBEncoding;\n  container.appendChild( renderer.domElement );\n\n  const controls = new OrbitControls( camera, renderer.domElement );\n  controls.addEventListener( 'change', render ); // use if there is no animation loop\n  controls.minDistance = 2;\n  controls.maxDistance = 10;\n  controls.target.set( 0, 0, - 0.2 );\n  controls.update();\n\n  window.addEventListener( 'resize', onWindowResize );\n\n}\n\nfunction onWindowResize() {\n\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n\n  renderer.setSize( window.innerWidth, window.innerHeight );\n\n  render();\n\n}\n\n//\n\nfunction render() {\n\n  renderer.render( scene, camera );\n\n}"]},"metadata":{},"sourceType":"module"}